"""Artifact wrappers for UniDesign job outputs."""

from __future__ import annotations

import shutil
from dataclasses import dataclass
from pathlib import Path
from typing import ClassVar, Dict, Optional


@dataclass(slots=True)
class UniDesignArtifact:
    """Base class for files generated by UniDesign commands."""

    path: Path
    prefix: str
    logical_name: str

    def read_text(self, encoding: str = "utf-8", errors: str = "strict") -> str:
        """Return the textual contents of the artifact."""

        return self.path.read_text(encoding=encoding, errors=errors)

    def read_bytes(self) -> bytes:
        """Return the binary contents of the artifact."""

        return self.path.read_bytes()

    def open(self, mode: str = "r", *args, **kwargs):
        """Open the underlying file handle."""

        return self.path.open(mode, *args, **kwargs)

    def default_filename(self) -> str:
        """Return the filename used when persisting the artifact."""

        return self.path.name

    def persist(self, target_dir: Path, filename: Optional[str] = None) -> Path:
        """Copy the artifact into ``target_dir``.

        Parameters
        ----------
        target_dir:
            Destination directory for the copy.
        filename:
            Optional override for the persisted filename. When omitted, the
            default derived from the logical name is used.
        """

        target_dir.mkdir(parents=True, exist_ok=True)
        destination = target_dir / (filename or self.default_filename())
        shutil.copy2(self.path, destination)
        return destination


@dataclass(slots=True)
class _PrefixedArtifact(UniDesignArtifact):
    """Artifact whose persisted name is derived from the UniDesign prefix."""

    suffix_map: ClassVar[Dict[str, str]]

    def default_filename(self) -> str:  # pragma: no cover - trivial delegation
        suffix = self.suffix_map.get(self.logical_name)
        if suffix is None:
            return super().default_filename()
        return f"{self.prefix}{suffix}"


@dataclass(slots=True)
class SelfEnergyReport(_PrefixedArtifact):
    """Summary of per-residue energies from ``ProteinDesign``."""

    suffix_map: ClassVar[Dict[str, str]] = {"self_energy": "_selfenergy.txt"}


@dataclass(slots=True)
class RotamerList(_PrefixedArtifact):
    """Dunbrack/Honig rotamer enumerations for a design run."""

    suffix_map: ClassVar[Dict[str, str]] = {
        "rotamer_list": "_rotlist.txt",
        "rotamer_list_secondary": "_rotlistSEC.txt",
        "rotamer_list_stability": "_rotlist.txt",
    }


@dataclass(slots=True)
class DesignRotamerIndices(_PrefixedArtifact):
    """Mapping between designable residues and rotamer indices."""

    suffix_map: ClassVar[Dict[str, str]] = {
        "design_rotamer_indices": "_desrots",
    }


@dataclass(slots=True)
class DesignSequenceSet(_PrefixedArtifact):
    """Collection of sequences sampled during design."""

    suffix_map: ClassVar[Dict[str, str]] = {
        "design_sequences": "_desseqs",
        "best_sequences": "_bestseqs",
    }


@dataclass(slots=True)
class StructureModel(_PrefixedArtifact):
    """Optimised structural model exported as a PDB file."""

    suffix_map: ClassVar[Dict[str, str]] = {
        "best_structure": "_beststruct.pdb",
    }


@dataclass(slots=True)
class SiteSummary(_PrefixedArtifact):
    """Residue-level metadata describing designed sites."""

    suffix_map: ClassVar[Dict[str, str]] = {
        "best_sites": "_bestsites",
        "best_mutation_sites": "_bestmutsites",
    }


@dataclass(slots=True)
class LigandPoseEnsemble(_PrefixedArtifact):
    """Ligand poses identified during protein-ligand design."""

    suffix_map: ClassVar[Dict[str, str]] = {
        "best_ligand_pose": "_bestlig.mol2",
    }


@dataclass(slots=True)
class LigandParameters(UniDesignArtifact):
    """Generated ligand parameter set."""

    def default_filename(self) -> str:
        if self.logical_name == "parameter_file":
            return "LIG_PARAM.prm"
        return super().default_filename()


@dataclass(slots=True)
class LigandTopology(UniDesignArtifact):
    """Generated ligand topology definitions."""

    def default_filename(self) -> str:
        if self.logical_name == "topology_file":
            return "LIG_TOPO.inp"
        return super().default_filename()


__all__ = [
    "UniDesignArtifact",
    "SelfEnergyReport",
    "RotamerList",
    "DesignRotamerIndices",
    "DesignSequenceSet",
    "StructureModel",
    "SiteSummary",
    "LigandPoseEnsemble",
    "LigandParameters",
    "LigandTopology",
]
